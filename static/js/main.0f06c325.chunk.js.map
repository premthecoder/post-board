{"version":3,"sources":["logo.svg","components/navBar.jsx","components/editPost.jsx","components/post.jsx","components/addPost.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","state","react_default","a","createElement","Fragment","className","href","Component","EditPost","_this","this","type","placeholder","value","props","editPost","onChange","onUpdateHandle","onClick","onUpdate","post","Post","_this2","id","onDelete","onEdit","edit","AddPost","posts","newPost","error","handleValChange","event","setState","target","updatePostVal","addPost","trim","length","Math","max","apply","map","o","Object","toConsumableArray","splice","deletePost","index","indexOf","updatePost","postToEdit","find","errorClasses","color","display","paddingLeft","paddingTop","style","marginTop","components_post","key","App","navBar","components_addPost","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f06c325.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass NavBar extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">Post Board</a>\r\n                </nav>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nclass EditPost extends Component {\r\n\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <input type=\"text\" placeholder=\"Type your new post content here\" className=\"form-control mr-2 col-md-9 float-left\" value={this.props.editPost} onChange={this.props.onUpdateHandle}/>\r\n                <button className=\"btn btn-primary mr-2 btn-md col-md-2 float-left\" onClick={()=>this.props.onUpdate(this.props.post)}>Update</button>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default EditPost;","import React, { Component } from 'react';\r\nimport EditPost from './editPost';\r\n\r\nclass Post extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"col-md-7 mb-3\">\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    Post Id# {this.props.post.id}\r\n                    <button className=\"btn btn-danger btn-sm float-right\" onClick={()=>this.props.onDelete(this.props.post)}>X</button>\r\n                    <button className=\"btn btn-warning btn-sm float-right mr-2\" onClick={()=>this.props.onEdit(this.props.post)}>Edit</button>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {this.props.post.edit ? <EditPost post={this.props.post} onUpdateHandle={this.props.onUpdateHandle} editPost={this.props.editPost} onUpdate={this.props.onUpdate} value={this.props.post.value}></EditPost> : <p className=\"card-text\">{this.props.post.value}</p>}\r\n                </div>\r\n            </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Post;","import React, { Component } from 'react';\r\nimport './addPost.css';\r\nimport Post from './post';\r\n\r\nclass AddPost extends Component {\r\n    state = { \r\n        posts: [\r\n            {id: 1, value: 'My first post.', edit: false},\r\n            {id: 2, value: 'Second post.', edit: false},\r\n            {id: 3, value: 'I am feeling awesome today.', edit: false}\r\n        ],\r\n        newPost: \"\",\r\n        editPost: \"\",\r\n        error: \"\"\r\n     }\r\n\r\n    handleValChange = (event) => {\r\n        this.setState({editPost: event.target.value});\r\n    }\r\n\r\n    updatePostVal = (event) =>\r\n    {\r\n        this.setState({newPost: event.target.value});\r\n    }\r\n\r\n    addPost = () => {\r\n        if(this.state.newPost.trim().length>0){\r\n            this.setState({error: \"\"});\r\n            let id = this.state.posts.length>0 ? Math.max.apply(Math, this.state.posts.map(function(o) { return o.id; })) : 0;\r\n            let post = {id: id+1, value: this.state.newPost};\r\n            let posts = [...this.state.posts];\r\n            posts.splice(0,0,post);\r\n            this.setState({posts: posts, newPost: \"\"});\r\n        }\r\n        else{\r\n            this.setState({error: \"Please enter some characters to post.\"});\r\n        }\r\n    }\r\n\r\n    deletePost = post =>{\r\n        let index = this.state.posts.indexOf(post);\r\n        let posts = [...this.state.posts];\r\n        posts.splice(index,1);\r\n        this.setState({posts});\r\n    }\r\n\r\n    editPost = post =>{\r\n        let posts = [...this.state.posts];\r\n        let index = posts.indexOf(post);\r\n        posts[index].edit = true;\r\n        this.setState({posts, editPost: post.value});\r\n    }\r\n\r\n    updatePost = post => {\r\n        let posts = [...this.state.posts];\r\n        const postToEdit = posts.find(p=>p.id === post.id);\r\n        const index = posts.indexOf(postToEdit);\r\n        posts[index].value = this.state.editPost;\r\n        posts[index].edit = false;\r\n        this.setState({posts});\r\n    }\r\n\r\n    render() { \r\n        let errorClasses = {\r\n            color: \"red\",\r\n            display: this.state.error.length>0?\"block\":\"none\",\r\n            paddingLeft: \"25px\",\r\n            paddingTop: \"5px\",\r\n        }\r\n        return ( \r\n            <React.Fragment>\r\n            <div className=\"row\" style={{marginTop: 75+\"px\", paddingLeft: 25+\"px\"}}>\r\n                <input type=\"text\" placeholder=\"Type your new post content here\" className=\"form-control mr-2 col-md-6 float-left\" value={this.state.newPost} onChange={this.updatePostVal}/>\r\n                <button className=\"btn btn-success mr-2 btn-md col-md-1 float-left\" onClick={this.addPost}>Add</button>\r\n            </div>\r\n            <h6 className=\"row mt-0\" style={errorClasses}>\r\n                {this.state.error}\r\n            </h6>\r\n            <hr className=\"row col-md-7 bg-dark ml-3\" />\r\n            <div className=\"ml-2 row\">\r\n                {this.state.posts.map(post=>(\r\n                    <Post \r\n                        key={post.id}\r\n                        onDelete={this.deletePost}\r\n                        onEdit={this.editPost}\r\n                        onUpdate={this.updatePost}\r\n                        onUpdateHandle={this.handleValChange}\r\n                        editPost={this.state.editPost}\r\n                        post={post}>\r\n                    </Post>\r\n                ))}\r\n            </div>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddPost;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/navBar';\nimport AddPost from './components/addPost';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar></NavBar>\n        <AddPost></AddPost>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/js/bootstrap.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}